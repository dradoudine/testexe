name: Check, Rename and Create Release

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # Runs once a day at midnight

jobs:
  create_release:
    runs-on: windows-latest

    steps:
    - name: Check GitHub CLI version    
      run: gh --version
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v4
    # Step 2: Download the aaa.exe file from the URL
    - name: Download aaa.exe
      id: get_version
      run: |
        echo "Download with CURL"
        curl -o tsmaster.exe -L "https://github.com/llvm/llvm-project/releases/download/llvmorg-19.1.2/LLVM-19.1.2-win64.exe"       
    - name: Extraire la version du fichier EXE
      id: extract_version
      shell: pwsh
      run: |
        # VÃ©rifie si le fichier existe
        $version = (Get-Item -Path './tsmaster.exe').VersionInfo.FileVersion
        # Sanitisation de la version
        $version_sanitized = "v_" + ($version -replace '\.', '_') -replace '[^a-zA-Z0-9_]', ''
        $version_sanitized="v_1.1"
        Write-Output "Version Sanitized: $version_sanitized"
        $newFileName = "tsmaster_$version_sanitized.exe"        
        Rename-Item -Path './tsmaster.exe' -NewName $newFileName
        echo "extract_version=$version_sanitized" >> $env:GITHUB_OUTPUT

    # Step 5: Check if a release with the extracted version already exists
    - name: Check if release exists
      id: check_release
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        sudo apt-get install grep
        # Use GitHub CLI to check if a release with the version tag exists
        echo "Checking for releases with the version tag..."
        releases=$(gh release list)
        gh release list > releases.txt
        echo "Available releases:"
        echo "$releases"
        echo "XXXXXXXXXXXXXXXXXXXXXXXXXXX"
        version_sanitized="${{ steps.extract_version.outputs.extract_version }}"
        echo "$version_sanitized"
        release_exists=$(grep "$version_sanitized" releases.txt)
        echo "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"
        release_exists=$(echo "$releases" | grep "$version_sanitized")
        echo " release existes "
        echo "$release_exists"
        if [ -z "$release_exists" ]; then
         echo "Release does not exist."
         echo "exists=false" >> $GITHUB_OUTPUT
        else
          echo "Release already exists."
          echo "exists=true" >> $GITHUB_OUTPUT
        fi

    # Step 6: If the release does not exist, create it and upload the renamed file as an asset
    - name: Create GitHub Release
      shell: bash
      if: steps.check_release.outputs.exists == 'false'
      run: |
        # Create a new GitHub release with the extracted version as the tag and upload the renamed file
        gh release create "v${{ steps.get_version.outputs.version }}" \
        --title "v${{ steps.get_version.outputs.version }}" \
        --notes "Release for version v${{ steps.get_version.outputs.version }}" \
        "tsmaster_v${{ steps.get_version.outputs.version_sanitized }}.exe"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
