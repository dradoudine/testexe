name: Check, Rename and Create Release

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # Runs once a day at midnight

jobs:
  create_release:
    runs-on: windows-latest

    steps:
    - name: Check GitHub CLI version    
      run: gh --version
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v4
    # Step 2: Download the aaa.exe file from the URL
    - name: Download aaa.exe
      id: get_version
      run:
        #curl -L -o tsmaster.exe "http://www.tosun.tech/TOSUNSoftware/TSMaster_Setup_alpha.exe"
        curl -L -o tsmaster.exe "https://github.com/llvm/llvm-project/releases/download/llvmorg-19.1.1/LLVM-19.1.1-win64.exe"
        version=$(powershell -Command "(Get-Item -Path './tsmaster.exe').VersionInfo.FileVersion")
        version_sanitized=v_$(echo $version | tr '.' '_' | sed 's/[^a-zA-Z0-9_]*//g')
        mv tsmaster.exe "tsmaster_${{ steps.get_version.outputs.version_sanitized }}.exe"
        echo "{version_sanitized}={$version_sanitized}" >> $GITHUB_OUTPUT

    # Step 5: Check if a release with the extracted version already exists
    - name: Check if release exists
      id: check_release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Use GitHub CLI to check if a release with the version tag exists
        echo "Checking for releases with the version tag..."
        releases=$(gh release list)
        echo "Available releases:"
        echo "$releases"
    
        release_exists=$(echo "$releases" | grep "v${{ steps.get_version.outputs.version_sanitized }}")

        if [ -z "$release_exists" ]; then
         echo "Release does not exist."
         echo "{exists}={false}" >> $GITHUB_OUTPUT
        else
          echo "Release already exists."
          echo "{exists}={true}" >> $GITHUB_OUTPUT
        fi

    # Step 6: If the release does not exist, create it and upload the renamed file as an asset
    - name: Create GitHub Release
      if: steps.check_release.outputs.exists == 'false'
      run: |
        # Create a new GitHub release with the extracted version as the tag and upload the renamed file
        gh release create "v${{ steps.get_version.outputs.version }}" \
        --title "v${{ steps.get_version.outputs.version }}" \
        --notes "Release for version v${{ steps.get_version.outputs.version }}" \
        "tsmaster_v${{ steps.get_version.outputs.version_sanitized }}.exe"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
