name: Check, Rename and Create Release

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *' # Runs once a day at midnight

jobs:
  create_release:
    runs-on: windows-latest

    steps:
    - name: Check GitHub CLI version    
      run: gh --version
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v4
    # Step 2: Download the aaa.exe file from the URL
    - name: Download aaa.exe
      id: get_version
      run: |
        echo "Download with CURL"
        curl -o tsmaster.exe -L "http://www.tosun.tech/TOSUNSoftware/TSMaster_Setup_alpha.exe"       
    - name: Extraire la version du fichier EXE
      id: extract_version
      shell: pwsh
      run: |
        # VÃ©rifie si le fichier existe
        $version = (Get-Item -Path './tsmaster.exe').VersionInfo.FileVersion
        # Sanitisation de la version
        $release_name = "v_" + ($version -replace '\.', '_') -replace '[^a-zA-Z0-9_]', ''
        Write-Output "release name: $release_name"
        "release_name=$release_name" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
    # Step 5: Check if a release with the extracted version already exists
    - name: Check if release exists
      id: check_release
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Use GitHub CLI to check if a release with the version tag exists
        echo "Checking for releases with the version tag..."
        releases=$(gh release list)
        echo "Available releases:"
        release_name="${{ steps.extract_version.outputs.release_name }}"
        release_exists=$(echo "$releases" | grep "$release_name") || true
        if [ -z "$release_exists" ]; then
         echo "Release does not exist."
         echo "exists=false" >> $GITHUB_OUTPUT
        else
          echo "Release already exists."
          echo "exists=true" >> $GITHUB_OUTPUT
        fi
        mv "./tsmaster.exe" "./tsmaster_$release_name.exe"

    # Step 6: If the release does not exist, create it and upload the renamed file as an asset
    - name: Create GitHub Release
      shell: bash
      if: steps.check_release.outputs.exists == 'false'
      run: |
        # Create a new GitHub release with the extracted version as the tag and upload the renamed file
        gh release create "${{ steps.extract_version.outputs.release_name }}" \
        --title "${{ steps.extract_version.outputs.release_name }}" \
        --notes "Release for version ${{ steps.extract_version.outputs.release_name }}" \
        "tsmaster_${{ steps.extract_version.outputs.release_name }}.exe"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
